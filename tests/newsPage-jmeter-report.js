const fs = require('fs');
const xml2js = require('xml2js');

(async () => {
  const filePath = './result/documentsPage.jtl';
  if (!fs.existsSync(filePath)) {
    console.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    process.exit(1);
  }
  const data = fs.readFileSync(filePath, 'utf8');
  if (data.trim() === '') {
    console.error(`–§–∞–π–ª –ø—É—Å—Ç: ${filePath}`);
    process.exit(1);
  }
  try {
    const result = await xml2js.parseStringPromise(data);
    const samples = result.testResults.httpSample || [];
    if (samples.length === 0) {
      console.log('–û–±—Ä–∞–∑—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
      process.exit(0);
    }
    const responseTimes = samples.map(s => parseInt(s.$.t));
    const errorCount = samples.filter(s => s.$.s === 'false').length;
    const avg = Math.round(responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length);
    const max = Math.max(...responseTimes);
    const sorted = [...responseTimes].sort((a, b) => a - b);
    const p95 = sorted[Math.floor(sorted.length * 0.95)];
    const p99 = sorted[Math.floor(sorted.length * 0.99)];
    console.log(`üìä –û—Ç—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è News Page:`);
    console.log(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${max}ms`);
    console.log(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avg}ms`);
    console.log(`  95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${p95}ms`);
    console.log(`  99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${p99}ms`);
    console.log(`  –û—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${errorCount}`);
    if (max >= 10000) throw new Error(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ: ${max}`);
    if (avg >= 1600) throw new Error(`‚ùå –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ: ${avg}`);
    if (errorCount !== 0) throw new Error(`‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö JMeter`);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${err.message}`);
    process.exit(1);
  }
})();