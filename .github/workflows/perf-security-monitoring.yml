name: Perf + Security + Accessibility Monitoring on Prod

on:
  push:
    branches:
      - feature/*

jobs:
  validate-robots:
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    steps:
      - name: Validate robots.txt
        id: robots_txt_validation
        run: |
          echo "Fetching robots.txt..."
          curl -sfL https://chelzoo.ru/robots.txt -o robots.txt
          echo "Reading actual content..."
          cat <<EOF > expected_robots.txt
          # *
          User-agent: *
          Disallow: /components

          # Host
          Host: https://chelzoo.ru

          # Sitemaps
          Sitemap: https://chelzoo.ru/api/get-sitemap
          EOF
          echo "Comparing with expected content..."
          if ! diff -u expected_robots.txt robots.txt; then
            echo "‚ùå robots.txt does not match the expected content."
            exit 1
          fi
          echo "‚úÖ robots.txt matches expected content."

  jmeter-tests:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install dependencies
        run: npm ci

      - name: Cache JMeter
        id: cache-jmeter
        uses: actions/cache@v4
        with:
          path: ./apache-jmeter-5.6.3
          key: jmeter-${{ runner.os }}-v5.6.3

      - name: Download JMeter if not cached
        if: steps.cache-jmeter.outputs.cache-hit != 'true'
        run: |
          wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz

      - name: Add JMeter to PATH
        run: echo "$PWD/apache-jmeter-5.6.3/bin" >> $GITHUB_PATH

      - name: Create report directories
        run: |
          mkdir -p ./report
          mkdir -p ./result
          mkdir -p ./errors

      - name: Run JMeter - Home Page
        run: |
          mkdir -p ./report/homePage
          if ! jmeter -n -t ./tests/homePageTest.jmx \
            -l ./report/homePage/homePage.jtl \
            -Jjmeter.save.saveservice.output_format=xml \
            -Jjmeter.save.saveservice.print_field_names=true \
            -Jjmeter.save.saveservice.response_data.on_error=true \
            -Jjmeter.save.saveservice.timestamp_format=ms; then
            echo "JMETER_FAIL_homePage=1" >> $GITHUB_ENV
            echo "‚ùå JMeter test failed: Home Page" >> ./errors/summary.txt
          fi

          cp ./report/homePage/homePage.jtl ./result/homePage.jtl || true

          if ! node tests/homePage-jmeter-report.js; then
            echo "PARSER_FAIL_homePage=1" >> $GITHUB_ENV
            echo "‚ùå Parser failed: Home Page" >> ./errors/summary.txt
          fi

      - name: Run JMeter - Documents Page
        run: |
          mkdir -p ./report/documentsPage
          if ! jmeter -n -t ./tests/documentsPageTest.jmx \
            -l ./report/documentsPage/documentsPage.jtl \
            -Jjmeter.save.saveservice.output_format=xml \
            -Jjmeter.save.saveservice.print_field_names=true \
            -Jjmeter.save.saveservice.response_data.on_error=true \
            -Jjmeter.save.saveservice.timestamp_format=ms; then
            echo "JMETER_FAIL_documentsPage=1" >> $GITHUB_ENV
            echo "‚ùå JMeter test failed: Documents Page" >> ./errors/summary.txt
          fi

          cp ./report/documentsPage/documentsPage.jtl ./result/documentsPage.jtl || true

          if ! node tests/documentsPage-jmeter-report.js; then
            echo "PARSER_FAIL_documentsPage=1" >> $GITHUB_ENV
            echo "‚ùå Parser failed: Documents Page" >> ./errors/summary.txt
          fi

      - name: Run JMeter - News Page
        run: |
          mkdir -p ./report/newsPage
          if ! jmeter -n -t ./tests/newsPageTest.jmx \
            -l ./report/newsPage/newsPage.jtl \
            -Jjmeter.save.saveservice.output_format=xml \
            -Jjmeter.save.saveservice.print_field_names=true \
            -Jjmeter.save.saveservice.response_data.on_error=true \
            -Jjmeter.save.saveservice.timestamp_format=ms; then
            echo "JMETER_FAIL_newsPage=1" >> $GITHUB_ENV
            echo "‚ùå JMeter test failed: News Page" >> ./errors/summary.txt
          fi

          cp ./report/newsPage/newsPage.jtl ./result/newsPage.jtl || true

          if ! node tests/newsPage-jmeter-report.js; then
            echo "PARSER_FAIL_newsPage=1" >> $GITHUB_ENV
            echo "‚ùå Parser failed: News Page" >> ./errors/summary.txt
          fi

      - name: Final validation & summary
        run: |
          echo "===== TEST SUMMARY ====="
          if [ -f ./errors/summary.txt ]; then
            cat ./errors/summary.txt
            echo "========================"
            exit 1
          else
            echo "‚úÖ All JMeter tests and parsers passed."
          fi

  lighthouse:
    runs-on: ubuntu-24.04
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.15.x

      - name: Run Lighthouse CI - Desktop
        run: lhci autorun --config .lighthouserc.desktop.js

      - name: Parse Lighthouse results and print summary
        if: always() 
        run: |
          node - <<'EOF'
          const fs = require('fs');

          try {
            const data = JSON.parse(fs.readFileSync('.lighthouseci/lhr-*.json', 'utf8'));
            const audits = data[0].audits;
            const categories = data[0].categories;

            // –î–≤–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
            const thresholds = {
              'first-contentful-paint': { warn: 2000, error: 2500 },
              'largest-contentful-paint': { warn: 2500, error: 4000 },
              'speed-index': { warn: 3400, error: 4000 },
              'interactive': { warn: 3800, error: 5000 },
              'total-blocking-time': { warn: 200, error: 500 },
              'cumulative-layout-shift': { warn: 0.1, error: 0.25 }
            };

            console.log('üìä Lighthouse Audit Summary:');
            let hasError = false;

            Object.entries(thresholds).forEach(([id, limits]) => {
              const audit = audits[id];
              if (!audit) return;
              const value = audit.numericValue;
              let status, emoji;

              if (value > limits.error) {
                status = 'ERROR';
                emoji = '‚ùå';
                hasError = true;
              } else if (value > limits.warn) {
                status = 'WARN';
                emoji = '‚ö†Ô∏è';
              } else {
                status = 'PASS';
                emoji = '‚úÖ';
              }

              console.log(`${emoji} ${audit.title}: ${value}${audit.numericUnit || ''} | warn ‚â§ ${limits.warn}, error ‚â§ ${limits.error} (${status})`);
            });

            const perfScore = categories.performance.score * 100;
            console.log(`\nOverall Performance Score: ${perfScore} / 100`);

            if (hasError) {
              console.error('‚ùå One or more metrics exceeded ERROR thresholds.');
              process.exit(1);
            }
          } catch (error) {
            console.error('Error parsing Lighthouse results:', error.message);
            process.exit(1);
          }
          EOF

  validate-cache-headers:
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    steps:
      - name: Fetch and validate cache headers of CDN media resources
        run: |
          echo "Fetching main page..."
          curl -s https://chelzoo.ru > page.html

          echo "Extracting CDN media resources from HTML..."
          grep -Eo 'https://cdn\.chelzoo\.ru/[^\"\, ]+\.(svg|jpeg|jpg|png|gif|webp)|https://chelzoo\.ru/_next/image\?url=[^\"\, ]+' page.html \
            | sort -u > urls.txt

          echo "Validating Cache-Control headers..."
          EXITCODE=0

          while IFS= read -r url; do
            echo "Checking $url"
            HEADER=$(curl -s -I "$url" | grep -i '^Cache-Control:' | tr -d '\r')

            if [[ "$url" == *"/_next/static/media/"* ]]; then
              EXPECTED="max-age=31536000"
            elif [[ "$url" == *"image?url=https%3A%2F%2Fcdn.chelzoo.ru%2F_next%2Fstatic%2Fmedia"* ]]; then
              EXPECTED="max-age=31536000"
            elif [[ "$url" == *"image?url=https%3A%2F%2Fstorage.yandexcloud.net"* ]]; then
              EXPECTED="max-age=3600"
            else
              EXPECTED="max-age=3600"
            fi

            if echo "$HEADER" | grep -iq "$EXPECTED"; then
              echo "‚úÖPASSED: $url"
            else
              echo "‚ùåFAILED: $url"
              echo "   Found:    $HEADER"
              echo "   Expected to contain: $EXPECTED"
              EXITCODE=1
            fi
          done < urls.txt

          if [[ $EXITCODE -ne 0 ]]; then
            echo "Some resources have incorrect cache headers."
            exit 1
          else
            echo "All resources have correct cache headers."
          fi


