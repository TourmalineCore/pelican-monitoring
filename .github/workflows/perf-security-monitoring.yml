name: Perf + Security + Accessibility Monitoring on Prod

on:
  push:
    branches:
      - feature/*

jobs:
  validate-robots:
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    steps:
      - name: Validate robots.txt
        id: robots_txt_validation
        run: |
          echo "Fetching robots.txt..."
          curl -sfL https://chelzoo.ru/robots.txt -o robots.txt
          echo "Reading actual content..."
          cat <<EOF > expected_robots.txt
          # *
          User-agent: *
          Disallow: /components

          # Host
          Host: https://chelzoo.ru

          # Sitemaps
          Sitemap: https://chelzoo.ru/api/get-sitemap
          EOF
          echo "Comparing with expected content..."
          if ! diff -u expected_robots.txt robots.txt; then
            echo "‚ùå robots.txt does not match the expected content."
            exit 1
          fi
          echo "‚úÖ robots.txt matches expected content."

  jmeter-tests:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache JMeter
        id: cache-jmeter
        uses: actions/cache@v4
        with:
          path: ./apache-jmeter-5.6.3
          key: jmeter-${{ runner.os }}-v5.6.3

      - name: Download JMeter if not cached
        if: steps.cache-jmeter.outputs.cache-hit != 'true'
        run: |
          wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz

      - name: Add JMeter to PATH
        run: echo "$PWD/apache-jmeter-5.6.3/bin" >> $GITHUB_PATH

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        run: npm ci

      - name: Create result directory
        run: mkdir -p result

      - name: Run and parse JMeter - Home Page
        run: |
          jmeter -n -t ./tests/homePageTest.jmx -l ./result/homePage.jtl -Jjmeter.save.saveservice.output_format=xml
          node tests/homePage-jmeter-report.js

      - name: Run and parse JMeter - Documents Page
        run: |
          jmeter -n -t ./tests/documentsPageTest.jmx -l ./result/documentsPage.jtl -Jjmeter.save.saveservice.output_format=xml
          node tests/documentsPage-jmeter-report.js

      - name: Run and parse JMeter - News Page
        run: |
          jmeter -n -t ./tests/newsPageTest.jmx -l ./result/newsPage.jtl -Jjmeter.save.saveservice.output_format=xml
          node tests/newsPage-jmeter-report.js

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-result-files
          path: result/

  lighthouse:
    runs-on: ubuntu-24.04
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # - name: Cache node modules
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      # - name: Install Node dependencies
      #   run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.15.x

      - name: Run Lighthouse CI - Desktop
        run: lhci autorun --config .lighthouserc.desktop.js

  validate-cache-headers:
      runs-on: ubuntu-24.04
      timeout-minutes: 2
      steps:
        - name: Fetch and validate cache headers of CDN media resources
          run: |
            echo "Fetching main page..."
            curl -s https://chelzoo.ru > page.html

            echo "Extracting CDN media resources from HTML..."
            grep -Eo 'https://cdn\.chelzoo\.ru/[^\"\, ]+\.(svg|jpeg|jpg|png|gif|webp)' page.html | sort -u > urls.txt

            echo "Validating Cache-Control headers..."
            EXITCODE=0

            while IFS= read -r url; do
              echo "Checking $url"
              HEADER=$(curl -s -I "$url" | grep -i '^Cache-Control:' | tr -d '\r')

              if [[ "$url" == *"/_next/static/media/"* ]]; then
                EXPECTED="max-age=31536000"
              else
                EXPECTED="max-age=3600"
              fi

              if echo "$HEADER" | grep -iq "$EXPECTED"; then
                echo "‚úÖPASSED: $url"
              else
                echo "‚ùåFAILED: $url"
                echo "   Found:    $HEADER"
                echo "   Expected to contain: $EXPECTED"
                EXITCODE=1
              fi
            done < urls.txt

            if [[ $EXITCODE -ne 0 ]]; then
              echo "Some resources have incorrect cache headers."
              exit 1
            else
              echo "All resources have correct cache headers."
            fi

  # notify:
  #   runs-on: ubuntu-24.04
  #   needs: [validate-robots, jmeter-tests, lighthouse, validate-cache-headers]
  #   if: always()
  #   steps:
  #     - name: Notify on failure
  #       run: |
  #         FAIL_MSG=""

  #         if [ "${{ needs.validate-robots.result }}" != "success" ]; then
  #           FAIL_MSG+="\n‚ùå Robots.txt not matches the right version. Check the pipeline and go to https://chelzoo.ru/robots.txt/"
  #         fi

  #         if [ "${{ needs.jmeter-tests.result }}" != "success" ]; then
  #           FAIL_MSG+="\nüìâ JMeter tests are failed. Check the pipeline!"
  #         fi

  #         if [ "${{ needs.lighthouse.result }}" != "success" ]; then
  #           FAIL_MSG+="\nüí° Lighthouse CI found problems with chelzoo.ru performance or accessibility. Check the pipeline!"
  #         fi

  #         if [ "${{ needs.validate-cache-headers.result }}" != "success" ]; then
  #           FAIL_MSG+="\nüß© There is a problem with Cache-control!"
  #         fi


  #         if [ -n "$FAIL_MSG" ]; then
  #           curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
  #             -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
  #             -d text="üö® CI pipeline has failed with the following errors:$FAIL_MSG\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #         else
  #           echo "‚úÖ All checks were passed successfully."
  #         fi
