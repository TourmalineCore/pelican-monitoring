name: Perf + Security + Accessibility Monitoring on Prod

on:
  push:
    branches:
      - feature/*

jobs:
  validate-robots:
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    steps:
      - name: Validate robots.txt
        id: robots_txt_validation
        run: |
          echo "Fetching robots.txt..."
          curl -sfL https://chelzoo.ru/robots.txt -o robots.txt
          echo "Reading actual content..."
          cat <<EOF > expected_robots.txt
          # *
          User-agent: *
          Disallow: /components

          # Host
          Host: https://chelzoo.ru

          # Sitemaps
          Sitemap: https://chelzoo.ru/api/get-sitemap
          EOF
          echo "Comparing with expected content..."
          if ! diff -u expected_robots.txt robots.txt; then
            echo "‚ùå robots.txt does not match the expected content."
            exit 1
          fi
          echo "‚úÖ robots.txt matches expected content."

  jmeter-tests:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache JMeter
        id: cache-jmeter
        uses: actions/cache@v4
        with:
          path: ./apache-jmeter-5.6.3
          key: jmeter-${{ runner.os }}-v5.6.3

      - name: Download JMeter if not cached
        if: steps.cache-jmeter.outputs.cache-hit != 'true'
        run: |
          wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz

      - name: Add JMeter to PATH
        run: echo "$PWD/apache-jmeter-5.6.3/bin" >> $GITHUB_PATH

      - name: Create result directory
        run: mkdir -p result

      - name: Run and parse JMeter - Home Page
        run: |
          jmeter -n -t ./tests/homePageTest.jmx -l ./result/homePage.jtl -Jjmeter.save.saveservice.output_format=xml
          node tests/homePage-jmeter-report.js

      - name: Run and parse JMeter - Documents Page
        run: |
          jmeter -n -t ./tests/documentsPageTest.jmx -l ./result/documentsPage.jtl -Jjmeter.save.saveservice.output_format=xml
          node tests/documentsPage-jmeter-report.js

      - name: Run and parse JMeter - News Page
        run: |
          jmeter -n -t ./tests/newsPageTest.jmx -l ./result/newsPage.jtl -Jjmeter.save.saveservice.output_format=xml
          node tests/newsPage-jmeter-report.js

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-result-files
          path: result/

  lighthouse:
    runs-on: ubuntu-24.04
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install Node dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.15.x

      - name: Run Lighthouse CI - Desktop
        run: lhci autorun --config .lighthouserc.desktop.js

  # notify:
  #   runs-on: ubuntu-24.04
  #   needs: [validate-robots, jmeter-tests, lighthouse]
  #   if: always()
  #   steps:
  #     - name: Notify on failure
  #       run: |
  #         FAIL_MSG=""

  #         if [ "${{ needs.validate-robots.result }}" != "success" ]; then
  #           FAIL_MSG+="\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å robots.txt"
  #         fi

  #         if [ "${{ needs.jmeter-tests.result }}" != "success" ]; then
  #           FAIL_MSG+="\nüìâ JMeter —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –∏–ª–∏ –æ—à–∏–±–∫–∏"
  #         fi

  #         if [ "${{ needs.lighthouse.result }}" != "success" ]; then
  #           FAIL_MSG+="\nüí° Lighthouse CI –ø–æ–∫–∞–∑–∞–ª –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"
  #         fi

  #         if [ -n "$FAIL_MSG" ]; then
  #           curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
  #             -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
  #             -d text="üö® CI –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏:$FAIL_MSG\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #         else
  #           echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ."
  #         fi
